#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('a-front:server');
var http = require('http');
// var models = require("../models");

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// models.sequelize.sync().then(function () {
//   var server = app.listen(app.get('port'), function() {
//     debug('Express server listening on port ' + server.address().port);
//   });
// });

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// =====================================================================


io.on('connection', function(socket){
  io.emit('websock info', socket.id);

  socket.on('message', function(msg){
    console.log("[" + socket.id + "] Got: " + msg);
  });

  socket.on('disconnect', function(){
    console.log("[" + socket.id + "] disconnected");
  });
});


// SerialPort
var com          = require("serialport"),
    S            = require('string'),
    EventEmitter = require('events').EventEmitter;

var emitter    = new EventEmitter();
var serialPort = new com.SerialPort("/dev/ttyACM0", {
  baudrate: 38400,
  parity: 'odd',
  parser: com.parsers.readline('\r')
});

serialPort.on('open',function() {
  console.log('Connected to ' + this.path + " and listening...");
});

serialPort.on('data', function(data) {
  if ( S(data).contains('VERIFY-UID:')) {
    var card_id = cut_uid_from_raw_data(data);
    emitter.emit('verify', card_id);
    emitter.emit('authorized', "auth<RR>");
    io.emit('auth', "Card uuid " + card_id);
  } else {
    console.log(data);
    io.emit('message', data);
  }
});

serialPort.on('close',function() {
  console.log('Device disconected and the port is closed');
  io.emit('disconnected', "Device " + this.path + " disconected");
});

serialPort.on('error',function(err) {
  console.log('Error [' + new Date().toString() + "]:" + err);
  io.emit('error', "Error from middleware: " + err);
});

//Returns a string
function cut_uid_from_raw_data(uid) {
  var pos = uid.indexOf(':');
  return uid.substring(pos + 1, uid.length);
}

emitter.on('authorized', function (direction) {
  var buff = new Buffer(direction, 'ascii');
  serialPort.write(buff);
});

/*
  Write something on serial channel
  Data casts to a Buffer, like
    -Buffer([0xFF], 'hex');
    -Buffer(data, 'utf8');
*/
emitter.on('response', function (data) {
  var buff = new Buffer(data, 'ascii');
  serialPort.write(buff);
});

emitter.on('keepalive', function () {
  var buff = new Buffer("keepalive", 'ascii');
  serialPort.write(buff);
});

/**
  Server
*/
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
